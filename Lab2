{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/Hyunjulie/DeepLearningZeroToAll/blob/master/Lab2)"
      ]
    },
    {
      "metadata": {
        "id": "5a4Dv5jB57q3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 884
        },
        "outputId": "2357245a-e19d-45ce-c523-320bff02da70"
      },
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "tf.set_random_seed(777)\n",
        "\n",
        "W = tf.Variable(tf.random_normal([1]), name = 'weight')\n",
        "b = tf.Variable(tf.random_normal([1]), name = 'bias')\n",
        "\n",
        "X = tf.placeholder(tf.float32, shape=[None])\n",
        "Y = tf.placeholder(tf.float32, shape=[None])\n",
        "\n",
        "hypothesis = W * X + b\n",
        "\n",
        "cost = tf.reduce_mean(tf.square(hypothesis - Y))\n",
        "optimizer = tf.train.AdamOptimizer(learning_rate = 0.1)\n",
        "\n",
        "train = optimizer.minimize(cost)\n",
        "\n",
        "sess = tf.Session()\n",
        "sess.run(tf.global_variables_initializer())\n",
        "\n",
        "for step in range(2002): \n",
        "  cost_val, W_val, b_val, _ = \\\n",
        "  sess.run([cost, W, b, train], feed_dict={X:[1,2,3], Y:[1,4,5]})\n",
        "  if step % 40 == 0: \n",
        "    print(step, cost_val, W_val, b_val)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.3430971 [2.2387314] [-1.1728299]\n",
            "40 0.22359937 [1.9633937] [-0.6126264]\n",
            "80 0.22222358 [2.0016427] [-0.6678601]\n",
            "120 0.22222239 [2.0005147] [-0.66762936]\n",
            "160 0.22222216 [2.000054] [-0.6667858]\n",
            "200 0.22222225 [2.000008] [-0.66667813]\n",
            "240 0.22222216 [2.0000007] [-0.66666865]\n",
            "280 0.22222221 [2.0000002] [-0.66666675]\n",
            "320 0.22222233 [2.0000002] [-0.6666668]\n",
            "360 0.22222216 [2.] [-0.66666675]\n",
            "400 0.22222222 [2.] [-0.66666657]\n",
            "440 0.22222221 [2.] [-0.66666687]\n",
            "480 0.22222228 [1.9999998] [-0.666667]\n",
            "520 0.22222221 [2.] [-0.66666675]\n",
            "560 0.2222222 [1.9999998] [-0.66666687]\n",
            "600 0.2222222 [1.9999998] [-0.66666687]\n",
            "640 0.22222222 [2.] [-0.6666666]\n",
            "680 0.22222221 [1.9999999] [-0.6666671]\n",
            "720 0.2222222 [1.9999999] [-0.66666675]\n",
            "760 0.2222222 [1.9999999] [-0.6666667]\n",
            "800 0.22222228 [2.] [-0.6666666]\n",
            "840 0.2222222 [2.] [-0.6666666]\n",
            "880 0.22222222 [1.9999999] [-0.6666667]\n",
            "920 0.22222225 [2.] [-0.6666666]\n",
            "960 0.22222222 [2.] [-0.66666657]\n",
            "1000 0.2222222 [1.9999999] [-0.66666675]\n",
            "1040 0.22222228 [2.] [-0.66666657]\n",
            "1080 0.2222222 [2.] [-0.6666666]\n",
            "1120 0.22222228 [2.] [-0.6666665]\n",
            "1160 0.22222228 [1.9999999] [-0.6666669]\n",
            "1200 0.22222221 [2.] [-0.6666668]\n",
            "1240 0.22222216 [2.0000002] [-0.66666657]\n",
            "1280 0.22222225 [1.9999999] [-0.66666657]\n",
            "1320 0.22222225 [2.] [-0.66666687]\n",
            "1360 0.22222216 [2.0000002] [-0.66666657]\n",
            "1400 0.2222221 [2.0000002] [-0.66666657]\n",
            "1440 0.22222225 [2.0000005] [-0.6666662]\n",
            "1480 0.22222227 [1.9999998] [-0.6666669]\n",
            "1520 0.22222221 [1.9999996] [-0.6666669]\n",
            "1560 0.22222222 [2.0000002] [-0.6666667]\n",
            "1600 0.22222233 [1.9999993] [-0.666667]\n",
            "1640 0.22222222 [2.] [-0.66666657]\n",
            "1680 0.22222233 [1.9999994] [-0.66666704]\n",
            "1720 0.2222222 [1.9999982] [-0.6666684]\n",
            "1760 0.22222233 [1.9999995] [-0.6666669]\n",
            "1800 0.22222228 [2.0000014] [-0.66666555]\n",
            "1840 0.22222216 [1.9999907] [-0.6666755]\n",
            "1880 0.2222287 [1.9947927] [-0.6717612]\n",
            "1920 0.22223787 [1.9991335] [-0.66751534]\n",
            "1960 0.22222255 [1.9998711] [-0.66679287]\n",
            "2000 0.2222221 [2.0000165] [-0.66665053]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "7A--YXRG8jNB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "66a0437d-04a9-470b-c168-c92fa8546154"
      },
      "cell_type": "code",
      "source": [
        "print(sess.run(hypothesis, feed_dict={X: [5]}))\n",
        "print(sess.run(hypothesis, feed_dict={X: [2,5]}))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[9.333281]\n",
            "[3.3333073 9.333281 ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_i0zklwU82Zu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 884
        },
        "outputId": "45fe5376-4d44-4bcf-aa40-b17b1b837f1e"
      },
      "cell_type": "code",
      "source": [
        "for step in range(2003):\n",
        "  cost_val, W_val, b_val, _  = sess.run([cost, W, b, train], feed_dict={X: [1, 2, 3, 4, 5],\n",
        "                            Y: [2.1, 3.1, 4.1, 5.1, 6.1]})\n",
        "  if step % 40 == 0: \n",
        "    print(step, cost_val, W_val, b_val)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 3.52099 [1.7071888] [-0.95491457]\n",
            "40 0.008598444 [0.92794156] [1.2643831]\n",
            "80 0.00024008667 [1.0002167] [1.1022676]\n",
            "120 7.844553e-06 [1.0011715] [1.0971847]\n",
            "160 1.3415499e-07 [0.9999225] [1.1004443]\n",
            "200 1.1171778e-09 [1.0000037] [1.0999988]\n",
            "240 1.0425083e-11 [1.0000014] [1.0999936]\n",
            "280 1.4779288e-13 [0.9999997] [1.1000005]\n",
            "320 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "360 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "400 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "440 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "480 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "520 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "560 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "600 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "640 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "680 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "720 1.1368684e-14 [1.0000001] [1.0999995]\n",
            "760 1.3642421e-13 [1.0000001] [1.0999997]\n",
            "800 0.0 [1.] [1.1]\n",
            "840 0.0 [1.] [1.1]\n",
            "880 0.0 [1.] [1.1]\n",
            "920 0.0 [1.] [1.1]\n",
            "960 0.0 [1.] [1.1]\n",
            "1000 0.0 [1.] [1.1]\n",
            "1040 0.0 [1.] [1.1]\n",
            "1080 0.0 [1.] [1.1]\n",
            "1120 0.0 [1.] [1.1]\n",
            "1160 0.0 [1.] [1.1]\n",
            "1200 0.0 [1.] [1.1]\n",
            "1240 0.0 [1.] [1.1]\n",
            "1280 0.0 [1.] [1.1]\n",
            "1320 0.0 [1.] [1.1]\n",
            "1360 0.0 [1.] [1.1]\n",
            "1400 0.0 [1.] [1.1]\n",
            "1440 0.0 [1.] [1.1]\n",
            "1480 0.0 [1.] [1.1]\n",
            "1520 0.0 [1.] [1.1]\n",
            "1560 0.0 [1.] [1.1]\n",
            "1600 0.0 [1.] [1.1]\n",
            "1640 0.0 [1.] [1.1]\n",
            "1680 0.0 [1.] [1.1]\n",
            "1720 0.0 [1.] [1.1]\n",
            "1760 0.0 [1.] [1.1]\n",
            "1800 0.0 [1.] [1.1]\n",
            "1840 0.0 [1.] [1.1]\n",
            "1880 0.0 [1.] [1.1]\n",
            "1920 0.0 [1.] [1.1]\n",
            "1960 0.0 [1.] [1.1]\n",
            "2000 0.0 [1.] [1.1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "wmDflyfb9PkN",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}